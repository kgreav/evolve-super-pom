####################################################PIPELINE MENU####################################################
# branch - main:
# * Deploys super pom to Nexus
#
# pull requests:
# * Ensures version would not be SNAPSHOT and has not been released.
#
# Images used: https://bitbucket.org/zepben/vm-container-images/
#####################################################################################################################
image: zepben/pipeline-java-amazoncorretto:4.1.0

definitions:
  zep-basic-image: &zep-basic-image
    image: zepben/pipeline-basic:4.0.0

options:
  max-time: 30

pipelines:
  branches:
    main: 
      - step:
          <<: *zep-basic-image 
          name: Check and tag version
          script:
            - java-mvn-check-release-version pom.xml
            - source /scripts/common.sh
            - version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
            - tag_finalize_version $version
  tags:
    '*.*.*':
      - step:
          name: Maven Deploy to Nexus Repo
          caches:
            - maven
          script:
            - sed -i "s/{{access_key}}/$AWS_ACCESS_KEY/" ~/.aws/credentials
            - sed -i "s/{{secret_key}}/$AWS_SECRET_KEY/" ~/.aws/credentials
            - curl --user $BB_AUTH_STRING $MAVEN_SETTINGS -o maven-settings.xml
            - aws secretsmanager get-secret-value --secret-id zepben/gpgkey | jq '.SecretString' | cut -d\" -f2 | sed 's.\\n.\n.g' > zepben-gpg.key
            - gpg2 --batch --import zepben-gpg.key
            - mvn clean deploy -f pom.xml -s maven-settings.xml -P release,ossrh -Dserver.username=$OSSRH_USERNAME -Dserver.password=$OSSRH_PASSWORD -Dgpg.key.id=$GPG_KEY_ID -Dgpg.key.password=$GPG_KEY_PASSWORD
      - step: 
          image: hashicorp/packer
          name: build docker image for ci
          script:
            - apk add libxml2-utils
            # Scripts to copy dependencies from dependencyManagement
            - cp for-ci-build-image/deps-pom-template.xml deps-pom.xml
            - version=$(cat pom.xml | sed 's/xmlns.*=".*"//g' | xmllint --xpath '/project/version/text()' -)
            - sed -i "s/{{version}}/$version/g" deps-pom.xml
            - deps=$(cat pom.xml | sed 's/xmlns.*=".*"//g' | xmllint --xpath '/project/dependencyManagement/dependencies/dependency' -)
            - deps=$(echo $deps | sed 's/\//\\\//g; s/ /\\n/g')
            - ln=$(cat deps-pom.xml | grep -n "<dependencies>" | cut -d':' -f1)
            - ln=$((ln + 1))
            - sed -i "$ln i $deps" deps-pom.xml
            # Scripts to copy plugins from pluginManagement
            - plugins=$(cat pom.xml | sed 's/xmlns.*=".*"//g' | xmllint --xpath '/project/build/pluginManagement/plugins/plugin' -)
            - plugins=$(echo $plugins | sed 's/\//\\\//g; s/ /\\n/g')
            - ln=$(cat deps-pom.xml | grep -n "<plugins>" | cut -d':' -f1)
            - ln=$((ln + 1))
            - sed -i "$ln i $plugins" deps-pom.xml
            - xmllint -format deps-pom.xml > deps-pom-new.xml
            - mv -f deps-pom-new.xml deps-pom.xml
            - export PACKER_CONFIG_DIR="/opt/atlassian/bitbucketci/agent/build/"
            - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
            - cd for-ci-build-image
            - packer build build-container.json
            - packer build release-container.json
          services:
            - docker

  pull-requests:
    '**': 
      - step:
          <<: *zep-basic-image
          name: Check version
          script:
            - java-mvn-check-release-version pom.xml
